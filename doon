#!/bin/bash
#
# doon [ add-node | rm-node | add-host | rm-host ]
#
# doon [ add-node ] <remote ip>
# doon [ rm-node  ]
#
# doon [ add-host ] <mac> <ip> <port>
# doon [ rm-host  ] <mac> <ip> <port>
#
# TODO:
#   * add/rm-tunnel (same vxlan)
#       - create vtep
#       - add flows_per_vtep
#       - modify flows_per_host
#   * add/rm-tunnel (new vxlan)
#   * must be sudo
#   * do we need add-rm host then?
#   * show
#   * rm inet6 from doon switch if

SWITCH="doon"

function host_ops {
    MACADDR=$2
    IPADDR=$3
    PORT=$4
    VXLANID=100

    # FIXME
    VTEP_PORT=$(sudo ovs-ofctl show $SWITCH | grep vtep | cut -d'(' -f1)
    VTEP_PORT=10


    # ovswitch flow scheme:
    #
    # 0 - ACL
    #   dl_src valid; goto 1
    #   tun_id valid; goto 1
    #   drop
    # 1 - L2 local<->local, local<->vtep
    #   dl_dst valid, output
    #   arp target valid, output
    #   local in_port valid, set tun_id, output vtep
    #   goto 2
    # 2 - L2 vtep<->vtep
    #   vtep port valid, set tun_id, flood to other vteps 

    declare -a flows_per_host=( \
        # ACL table
        "table=0,dl_src=$MACADDR,priority=10,actions=resubmit(,1)" \

        # L2 switching host->host, vtep->host
        "table=1,dl_dst=$MACADDR,priority=10,actions=output:$PORT" \
        "table=1,arp,nw_dst=$IPADDR,priority=10,actions=output:$PORT" \

        # L2 switching host->vtep
        "table=1,in_port=$PORT,priority=10,actions=set_field:$VXLANID->tun_id,output:$VTEP_PORT" \

        # leftovers, should be vtep->vtep
    )

    case $1 in
        add-host)
            OP="add-flow"
            FLOW_SPLIT=""
            ;;

        rm-host)
            OP="del-flows"
            FLOW_SPLIT="-F ,priority"
            ;;

        *)
            echo "Usage: FIXME"
            exit 1
    esac

    ## install flows
    for i in "${flows_per_host[@]}"
    do
        FLOW_STR=$(echo $i | awk $FLOW_SPLIT '{print $1}')

        #echo sudo ovs-ofctl $OP $SWITCH $FLOW_STR
        sudo ovs-ofctl $OP $SWITCH $FLOW_STR
    done
}

function tunnel_ops {
    REMOTE_IP=$2
    VXLANID="100"
    VXLANVTEP="vtep-"$VXLANID
    VXLANIFNAME=$VXLANVTEP"-0"
    TEPPORT=10

    declare -a flows_per_tunnel=( \
        # ACL table
        "table=0,tun_id=$VXLANID,priority=10,actions=resubmit(,1)" \
    )

    function add_tunnel {

        # find first available vtep name
        for i in {0..1000}
        do 
            # DEBUG
            echo $i
            [ "$(ovs-ofctl show doon | grep "$VXLANVTEP-$i" | cut -d'(' -f2 | cut -d')' -f1)" == "" ] && break
        done

        VXLANIFNAME=$VXLANVTEP-$i

        echo "Adding VXLAN port $VXLANIFNAME to bridge $SWITCH"
        ovs-vsctl add-port $SWITCH $VXLANIFNAME -- set interface $VXLANIFNAME type=vxlan option:remote_ip=$REMOTE_IP option:key=flow

        # add per_tunnel flows
        for i in "${flows_per_tunnel[@]}"
        do
            sudo ovs-ofctl add-flow $SWITCH $i
        done
    }

    function rm_tunnel {
        # search for vtep with <remote ip>
        vtep_ifs=$(ovs-vsctl list-ports doon | grep vtep-)
        for vtep in $vtep_ifs
        do 
            RIP=$(ovs-vsctl get interface $vtep option:remote_ip 2>/dev/null) && \
            [ "$RIP" == "\"$REMOTE_IP"\" ] && echo "Removing $vtep" && TARGET_VTEP_IF=$vtep && break
        done

        [ "$TARGET_VTEP_IF" != "" ] && ovs-vsctl del-port $SWITCH $TARGET_VTEP_IF
        # FIXME need to cleanup host connections
    }

    case $1 in
        add-tunnel)
            add_tunnel
            ;;

        rm-tunnel)
            rm_tunnel
            ;;

        *)
            echo "Usage: doon [ add-tunnel | rm-tunnel ] <remote ip>"
            exit 1
    esac

}

function node_ops {
    REMOTE_IP=$2
    VXLANID="100"
    VXLANIFNAME="vtep-"$VXLANID"-0"
    TEPPORT=10

    declare -a flows_per_node=( \
        # ACL table
        "table=0,tun_id=$VXLANID,priority=10,actions=resubmit(,1)" \
        "table=0,priority=5,actions=drop" \

        # L2 switching host->host, vtep->host

        # L2 switching host->vtep

        # leftovers, should be vtep->vtep
        "table=1,priority=5,actions=drop" \
    )

    function switch_create {
        echo "Creating bridge $SWITCH"
        ovs-vsctl add-br $SWITCH
        # remove normal flow added automatically after add-br
        ovs-ofctl del-flows $SWITCH

        # create tunnel port
        echo "Adding VXLAN port $VXLANIFNAME to bridge $SWITCH"
        ovs-vsctl add-port $SWITCH $VXLANIFNAME -- set interface $VXLANIFNAME type=vxlan option:remote_ip=$REMOTE_IP option:key=flow ofport_request=$TEPPORT

        # create default switch flows
        for i in "${flows_per_node[@]}"
        do
            sudo ovs-ofctl add-flow $SWITCH $i
        done
    }

    function switch_destroy {
        # delete the switch
        echo "Deleting bridge $SWITCH"
        ovs-vsctl del-br $SWITCH
    }

    case $1 in
        add-node)
            switch_create
            ;;

        rm-node)
            switch_destroy
            ;;

        *)
            echo "Usage: node [ create | destroy ] <remote ip>"
            exit 1
    esac

}

case $1 in
    add-host | rm-host)
        host_ops $1 $2 $3 $4
        ;;

    add-node | rm-node)
        node_ops $1 $2
        ;;

    add-tunnel | rm-tunnel)
        tunnel_ops $1 $2
        ;;

    *)
        echo "Usage: host [ connect | disconnect ] <mac> <ip> <port> <switch>"
        exit 1
esac


